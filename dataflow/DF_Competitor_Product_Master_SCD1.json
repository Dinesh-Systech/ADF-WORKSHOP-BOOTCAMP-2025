{
	"name": "DF_Competitor_Product_Master",
	"properties": {
		"folder": {
			"name": "End to End Workshop/Stg to Dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SrcCompetitorProductMaster"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "TgtCompetitorProductMaster"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SnkProductMasterInsert"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SnkProductMasterUpdate"
				}
			],
			"transformations": [
				{
					"name": "JoinSrcTgt"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "AuditColumns1"
				},
				{
					"name": "AuditColumns2"
				},
				{
					"name": "selectCols"
				},
				{
					"name": "TransformationTgt"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "CompetitorProductKey"
				},
				{
					"name": "selectCols1"
				},
				{
					"name": "selectCols2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SKUCode as integer,",
				"          ItemName as string,",
				"          CompanyCode as string,",
				"          IndustryName as string,",
				"          BrandFamily as string,",
				"          BrandCode as string,",
				"          BrandName as string,",
				"          ReportingSegment as string,",
				"          BrandPackSize as string,",
				"          PackTypeCode as string,",
				"          BrandPackType as string,",
				"          State_Code as string,",
				"          State as string,",
				"          ProductCategory as string,",
				"          ProductSegment as string,",
				"          Flavour as string,",
				"          SubFlavour as string,",
				"          Division as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SrcCompetitorProductMaster",
				"source(output(",
				"          CompanyCode as string,",
				"          CompanyKey as integer,",
				"          CompanyName as string,",
				"          SalesOrgCode as string,",
				"          SalesOrgName as string,",
				"          ReportingHierarchyCode1 as string,",
				"          ReportingHierarchyName1 as string,",
				"          ReportingHierarchyCode2 as string,",
				"          ReportingHierarchyName2 as string,",
				"          ReportingHierarchyCode3 as string,",
				"          ReportingHierarchyName3 as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TgtCompetitorProductMaster",
				"SrcCompetitorProductMaster, TransformationTgt join(CompanyCode == tgt_CompanyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSrcTgt",
				"CompetitorProductKey split(isNull(SKUCode)||(SKUCode ==tgt_SKUCode && ReportingSegment!=tgt_ReportingSegment),",
				"     (SKUCode ==tgt_SKUCode && ReportingSegment!=tgt_ReportingSegment),",
				"     disjoint: false) ~> split1@(Insert, Update)",
				"split1@Insert alterRow(insertIf(true())) ~> alterRowInsert",
				"split1@Update alterRow(updateIf(true())) ~> alterRowUpdate",
				"alterRowInsert derive(UpdatedAt = toTimestamp(null()),",
				"          UpdatedBy = toString(null())) ~> AuditColumns1",
				"alterRowUpdate derive(tgtUpdatedAt = currentTimestamp(),",
				"          tgtUpdatedBy = tgtUpdatedBy) ~> AuditColumns2",
				"AuditColumns1 select(mapColumn(",
				"          PlantCode,",
				"          PlantName,",
				"          CompanyCode,",
				"          StateCode,",
				"          StateName,",
				"          CreatedAt,",
				"          UpdatedAt,",
				"          CreatedBy,",
				"          UpdatedBy,",
				"          PlantKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols",
				"TgtCompetitorProductMaster select(mapColumn(",
				"          each(match(true()),",
				"               'tgt_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TransformationTgt",
				"JoinSrcTgt derive(each(match(type=='string'), $$ = iif(isNull($$)||lower($$)=='null','UNK',$$)),",
				"          each(match(type=='integer'), $$ = iif(isNull($$),-1,toInteger($$))),",
				"          each(match(type=='timestamp'), $$ = iif(isNull($$),toTimestamp('31/12/2999'),$$))) ~> NullHandling",
				"NullHandling keyGenerate(output(CompetitorProductKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CompetitorProductKey",
				"AuditColumns2 select(mapColumn(",
				"          PlantCode,",
				"          PlantName,",
				"          CompanyCode,",
				"          StateCode,",
				"          StateName,",
				"          CreatedAt,",
				"          UpdatedAt,",
				"          CreatedBy,",
				"          UpdatedBy,",
				"          tgt_CompanyCode,",
				"          tgt_CompanyKey,",
				"          tgt_CompanyName,",
				"          tgt_SalesOrgCode,",
				"          tgt_SalesOrgName,",
				"          tgt_ReportingHierarchyCode1,",
				"          tgt_ReportingHierarchyName1,",
				"          tgt_ReportingHierarchyCode2,",
				"          tgt_ReportingHierarchyName2,",
				"          tgt_ReportingHierarchyCode3,",
				"          tgt_ReportingHierarchyName3,",
				"          tgt_CreatedAt,",
				"          tgt_UpdatedAt,",
				"          tgt_CreatedBy,",
				"          tgt_UpdatedBy,",
				"          PlantKey,",
				"          tgtUpdatedAt,",
				"          tgtUpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols1",
				"selectCols1 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$, 'tgt_', ' ') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols2",
				"selectCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SnkProductMasterInsert",
				"selectCols2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SnkProductMasterUpdate"
			]
		}
	}
}