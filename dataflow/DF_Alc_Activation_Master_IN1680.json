{
	"name": "DF_Alc_Activation_Master_IN1680",
	"properties": {
		"folder": {
			"name": "stg - dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SRCActicationMaster"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKAlcActivationMaster"
				}
			],
			"transformations": [
				{
					"name": "NullHandle"
				},
				{
					"name": "CustomerKey"
				},
				{
					"name": "SLCTcols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PromotionCode as string,",
				"          PromotionDescription as string,",
				"          PromotionType as string,",
				"          ProductLevelCode as string,",
				"          EffectiveFrom as string,",
				"          EffectiveTo as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCActicationMaster",
				"SRCActicationMaster derive(EffectiveFromN = toDate(EffectiveFrom, 'dd-MM-yyyy'),",
				"          EffectiveToN = toDate(EffectiveTo, 'dd-MM-yyyy'),",
				"          each(match(type =='string'), $$ = iifNull($$,'UNK')),",
				"          each(match(type=='integer'), $$ = iifNull($$,-1)),",
				"          each(match(type =='timestamp'), $$ = iifNull($$,toTimestamp('1900-01-01', 'yyyy-MM-dd')))) ~> NullHandle",
				"SLCTcols keyGenerate(output(CompanyKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CustomerKey",
				"NullHandle select(mapColumn(",
				"          PromotionCode,",
				"          PromotionDescription,",
				"          PromotionType,",
				"          ProductLevelCode,",
				"          CreatedAt,",
				"          UpdatedAt,",
				"          CreatedBy,",
				"          UpdatedBy,",
				"          EffectiveFrom = EffectiveFromN,",
				"          EffectiveTo = EffectiveToN",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTcols",
				"CustomerKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKAlcActivationMaster"
			]
		}
	}
}