{
	"name": "DF_Stg_Primary_Sales_Actuals_IN1680",
	"properties": {
		"folder": {
			"name": "src_to_stg"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "Srcsrcactuals"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "Srcstgactuals"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKstgActuals"
				}
			],
			"transformations": [
				{
					"name": "LeftSrcAndStg"
				},
				{
					"name": "SLCTall"
				},
				{
					"name": "maxStgdate"
				},
				{
					"name": "selectonlyDate"
				},
				{
					"name": "handleNull"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CompanyCode as string,",
				"          SalesOrgCode as string,",
				"          DistributionChannel as integer,",
				"          Division as integer,",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          CountryCode as string,",
				"          ZoneCode as string,",
				"          StateCode as string,",
				"          SKUCode as integer,",
				"          PlantCode as string,",
				"          TransactionDate as string,",
				"          VolumeActualCase as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Srcsrcactuals",
				"source(output(",
				"          CompanyCode as string,",
				"          SalesOrgCode as string,",
				"          DistributionChannel as integer,",
				"          Division as integer,",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          CountryCode as string,",
				"          ZoneCode as string,",
				"          StateCode as string,",
				"          SKUCode as integer,",
				"          PlantCode as string,",
				"          TransactionDate as date,",
				"          VolumeActualCase as integer,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Srcstgactuals",
				"Srcsrcactuals, SLCTall join(CompanyCode == stg_CompanyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftSrcAndStg",
				"Srcstgactuals select(mapColumn(",
				"          each(match(true()),",
				"               'stg_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTall",
				"SLCTall window(asc(stg_TransactionDate, true),",
				"     maxStgDate = max(stg_TransactionDate)) ~> maxStgdate",
				"maxStgdate select(mapColumn(",
				"          maxStgDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectonlyDate",
				"selectonlyDate derive(maxStgDateHandled = coalesce(maxStgDate,toDate('01-01-1990','yyyy-MM-dd' ))) ~> handleNull",
				"LeftSrcAndStg sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKstgActuals"
			]
		}
	}
}