{
	"name": "DF_Tgt_SCD1_Company_IN1675",
	"properties": {
		"folder": {
			"name": "DF_Stg_to_Tgt_IN1675"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "SrcCompany"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "TgtCompany"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "AlcCompany"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "JoinSrcAndTgt"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "newRecords"
				},
				{
					"name": "ChangedRecords"
				},
				{
					"name": "union"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "select6"
				},
				{
					"name": "CompanyKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CompanyCode as string,",
				"          CompanyName as string,",
				"          SalesOrgCode as string,",
				"          SalesOrgName as string,",
				"          ReportingHierarchyCode1 as string,",
				"          ReportingHierarchyName1 as string,",
				"          ReportingHierarchyCode2 as string,",
				"          ReportingHierarchyName2 as string,",
				"          ReportingHierarchyCode3 as string,",
				"          ReportingHierarchyName3 as string,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SrcCompany",
				"source(output(",
				"          CompanyCode as string,",
				"          ConpanyKey as integer,",
				"          CompanyName as string,",
				"          SalesOrgCode as string,",
				"          SalesOrgName as string,",
				"          ReportingHierarchyCode1 as string,",
				"          ReportingHierarchyName1 as string,",
				"          ReportingHierarchyCode2 as string,",
				"          ReportingHierarchyName2 as string,",
				"          ReportingHierarchyCode3 as string,",
				"          ReportingHierarchyName3 as string,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TgtCompany",
				"JoinSrcAndTgt split(isNull(select6@CompanyCode),",
				"     !isNull(select6@CompanyCode) &&\r",
				"(\r",
				"  (SrcCompany@CompanyCode == select6@CompanyCode) &&\r",
				"  (\r",
				"    SrcCompany@SalesOrgCode != select6@SalesOrgCode ||\r",
				"    SrcCompany@SalesOrgName != select6@SalesOrgName\r",
				"  )\r",
				")\r",
				",",
				"     SrcCompany@CompanyCode==select6@CompanyCode && SrcCompany@SalesOrgCode==select6@SalesOrgCode&&SrcCompany@SalesOrgName==select6@SalesOrgName,",
				"     disjoint: false) ~> split1@(Insert, Update, Existing)",
				"CompanyKey, select6 join(SrcCompany@CompanyCode == select6@CompanyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSrcAndTgt",
				"newRecords select(mapColumn(",
				"          CompanyCode = split1@Insert@CompanyCode,",
				"          CompanyKey,",
				"          CompanyName = split1@Insert@CompanyName,",
				"          SalesOrgCode = split1@Insert@SalesOrgCode,",
				"          SalesOrgName = split1@Insert@SalesOrgName,",
				"          ReportingHierarchyCode1 = split1@Insert@ReportingHierarchyCode1,",
				"          ReportingHierarchyName1 = split1@Insert@ReportingHierarchyName1,",
				"          ReportingHierarchyCode2 = split1@Insert@ReportingHierarchyCode2,",
				"          ReportingHierarchyName2 = split1@Insert@ReportingHierarchyName2,",
				"          ReportingHierarchyCode3 = split1@Insert@ReportingHierarchyCode3,",
				"          ReportingHierarchyName3 = split1@Insert@ReportingHierarchyName3,",
				"          CreatedDate,",
				"          CreatedBy,",
				"          UpdatedBy = split1@Insert@UpdatedBy,",
				"          UpdatedDate = split1@Insert@UpdatedDate,",
				"          CompanyCode = split1@Insert@CompanyCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"ChangedRecords select(mapColumn(",
				"          CompanyCode = split1@Update@CompanyCode,",
				"          CompanyKey,",
				"          CompanyName = split1@Update@CompanyName,",
				"          SalesOrgCode = split1@Update@SalesOrgCode,",
				"          SalesOrgName = split1@Update@SalesOrgName,",
				"          ReportingHierarchyCode1 = split1@Update@ReportingHierarchyCode1,",
				"          ReportingHierarchyName1 = split1@Update@ReportingHierarchyName1,",
				"          ReportingHierarchyCode2 = split1@Update@ReportingHierarchyCode2,",
				"          ReportingHierarchyName2 = split1@Update@ReportingHierarchyName2,",
				"          ReportingHierarchyCode3 = split1@Update@ReportingHierarchyCode3,",
				"          ReportingHierarchyName3 = split1@Update@ReportingHierarchyName3,",
				"          CreatedDate = split1@Update@CreatedDate,",
				"          CreatedBy = split1@Update@CreatedBy,",
				"          UpdatedDate,",
				"          UpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"split1@Existing select(mapColumn(",
				"          CompanyCode = split1@Existing@CompanyCode,",
				"          CompanyKey,",
				"          CompanyName = split1@Existing@CompanyName,",
				"          SalesOrgCode = split1@Existing@SalesOrgCode,",
				"          SalesOrgName = split1@Existing@SalesOrgName,",
				"          ReportingHierarchyCode1 = split1@Existing@ReportingHierarchyCode1,",
				"          ReportingHierarchyName1 = split1@Existing@ReportingHierarchyName1,",
				"          ReportingHierarchyCode2 = split1@Existing@ReportingHierarchyCode2,",
				"          ReportingHierarchyName2 = split1@Existing@ReportingHierarchyName2,",
				"          ReportingHierarchyCode3 = split1@Existing@ReportingHierarchyCode3,",
				"          ReportingHierarchyName3 = split1@Existing@ReportingHierarchyName3,",
				"          CreatedDate = split1@Existing@CreatedDate,",
				"          CreatedBy = split1@Existing@CreatedBy,",
				"          UpdatedDate = split1@Existing@UpdatedDate,",
				"          UpdatedBy = split1@Existing@UpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"split1@Insert derive(CreatedDate = currentTimestamp(),",
				"          CreatedBy = 'IN1675') ~> derivedColumn1",
				"split1@Update derive(UpdatedDate = currentTimestamp(),",
				"          UpdatedBy = 'IN1675') ~> derivedColumn2",
				"derivedColumn1 alterRow(insertIf(true())) ~> newRecords",
				"derivedColumn2 alterRow(updateIf(true())) ~> ChangedRecords",
				"select3 union(byName: true)~> union",
				"union derive(each(match(type=='string'), $$ = iif(isNull($$),'UNK',$$)),",
				"          each(match(type=='integer'), $$ = iifNull($$, -1, $$)),",
				"          each(match(type=='datetime'), $$ = iif(isNull($$), toTimestamp('2999-12-31 00:00:00','yyyy-MM-dd HH:mm:ss')))) ~> NullHandling",
				"TgtCompany select(mapColumn(",
				"          CompanyCode,",
				"          CompanyKey = ConpanyKey,",
				"          CompanyName,",
				"          SalesOrgCode,",
				"          SalesOrgName,",
				"          ReportingHierarchyCode1,",
				"          ReportingHierarchyName1,",
				"          ReportingHierarchyCode2,",
				"          ReportingHierarchyName2,",
				"          ReportingHierarchyCode3,",
				"          ReportingHierarchyName3,",
				"          CreatedBy,",
				"          CreatedDate,",
				"          UpdatedBy,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"SrcCompany keyGenerate(output(CompanyKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CompanyKey",
				"NullHandling sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AlcCompany"
			]
		}
	}
}