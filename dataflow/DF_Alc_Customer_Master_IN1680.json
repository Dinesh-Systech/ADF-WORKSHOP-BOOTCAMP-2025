{
	"name": "DF_Alc_Customer_Master_IN1680",
	"properties": {
		"folder": {
			"name": "stg - dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SRCstg"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SRCtgt"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKupdateTgt"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKinsert"
				}
			],
			"transformations": [
				{
					"name": "SelectTgt"
				},
				{
					"name": "LeftStgandTgt"
				},
				{
					"name": "Insert"
				},
				{
					"name": "SLCTupdate"
				},
				{
					"name": "SLCTinsert"
				},
				{
					"name": "NullHandle"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCstg",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCtgt",
				"SRCtgt select(mapColumn(",
				"          each(match(true()),",
				"               'tgt_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTgt",
				"SRCstg, SelectTgt join(CustomerCode == tgt_CustomerCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftStgandTgt",
				"NullHandle split( !isNull(tgt_CustomerCode) &&  (Address1!=tgt_Address1 ||Address2!=tgt_Address2 ||Address3!=tgt_Address3 ),",
				"     isNull(tgt_CustomerCode) || !isNull(tgt_CustomerCode) &&  (Address1!=tgt_Address1 ||Address2!=tgt_Address2 ||Address3!=tgt_Address3 ),",
				"     disjoint: true) ~> Insert@(update, insert)",
				"Insert@update select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTupdate",
				"Insert@insert select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTinsert",
				"LeftStgandTgt derive(column1 = ERROR_FUNCTION(''),",
				"          each(match(type=='string'), $$ = iifNull($$, 'UNK')),",
				"          each(match(type=='integer'), $$ = iifNull($$, -1)),",
				"          each(match(type=='timestamp'), $$ = iifNull($$, toTimestamp('2999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss')))) ~> NullHandle",
				"SLCTupdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKupdateTgt",
				"SLCTinsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKinsert"
			]
		}
	}
}