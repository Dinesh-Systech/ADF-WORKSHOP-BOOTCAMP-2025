{
	"name": "DF_Alc_Customer_Master_IN1680",
	"properties": {
		"folder": {
			"name": "stg - dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SRCstg"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SRCtgt"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKupdateTgt"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_sql_IN1680",
						"type": "DatasetReference"
					},
					"name": "SNKinsert"
				}
			],
			"transformations": [
				{
					"name": "SelectTgt"
				},
				{
					"name": "LeftStgandTgt"
				},
				{
					"name": "Insert"
				},
				{
					"name": "SLCTupdate"
				},
				{
					"name": "SLCTinsert"
				},
				{
					"name": "nullHandle"
				},
				{
					"name": "updateEnd"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          Market_Type as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCstg",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerKey as integer,",
				"          CustomerLocation as string,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          Market_Type as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string,",
				"          effective_start_date as timestamp,",
				"          effective_end_date as timestamp,",
				"          IsActive as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCtgt",
				"SRCtgt select(mapColumn(",
				"          each(match(true()),",
				"               'tgt_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTgt",
				"SRCstg, SelectTgt join(CustomerCode == tgt_CustomerCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftStgandTgt",
				"LeftStgandTgt split(!isNull(tgt_CustomerCode) &&  tgt_IsActive=='Y' && (Address1!=tgt_Address1 ||Address2!=tgt_Address2 ||Address3!=tgt_Address3 ),",
				"     isNull(tgt_CustomerCode) && !isNull(CustomerCode) || !isNull(tgt_CustomerCode) && tgt_IsActive=='Y' &&  (Address1!=tgt_Address1 ||Address2!=tgt_Address2 ||Address3!=tgt_Address3 ) ,",
				"     disjoint: true) ~> Insert@(update, insert)",
				"Insert@update select(mapColumn(",
				"          CustomerCode = tgt_CustomerCode,",
				"          CustomerLocation = tgt_CustomerLocation,",
				"          CustomerName = tgt_CustomerName,",
				"          Address1 = tgt_Address1,",
				"          Address2 = tgt_Address2,",
				"          Address3 = tgt_Address3,",
				"          CountryCode = tgt_CountryCode,",
				"          CountryName = tgt_CountryName,",
				"          ZoneCode = tgt_ZoneCode,",
				"          ZoneName = tgt_ZoneName,",
				"          StateCode = tgt_StateCode,",
				"          StateName = tgt_StateName,",
				"          SaleDistrict = tgt_SaleDistrict,",
				"          PostCode = tgt_PostCode,",
				"          RTM = tgt_RTM,",
				"          ProfitCentreCode = tgt_ProfitCentreCode,",
				"          ProfitCentreName = tgt_ProfitCentreName,",
				"          CostCentreCode = tgt_CostCentreCode,",
				"          CostCentreName = tgt_CostCentreName,",
				"          CreditDays = tgt_CreditDays,",
				"          Division = tgt_Division,",
				"          Market_Type = tgt_Market_Type,",
				"          CustomerLevel1 = tgt_CustomerLevel1,",
				"          CustomerLevel2 = tgt_CustomerLevel2,",
				"          CustomerLevel3 = tgt_CustomerLevel3,",
				"          Ref_Cluster = tgt_Ref_Cluster,",
				"          SalesGroupCode = tgt_SalesGroupCode,",
				"          SalesGroup = tgt_SalesGroup,",
				"          SaleOffice = tgt_SaleOffice,",
				"          SaleOfficeCode = tgt_SaleOfficeCode,",
				"          LocalGroupCode = tgt_LocalGroupCode,",
				"          LocalGroupName = tgt_LocalGroupName,",
				"          CreatedAt = tgt_CreatedAt,",
				"          UpdatedAt = tgt_UpdatedAt,",
				"          CreatedBy = tgt_CreatedBy,",
				"          UpdatedBy = tgt_UpdatedBy,",
				"          effective_start_date = tgt_effective_start_date,",
				"          effective_end_date = tgt_effective_end_date,",
				"          IsActive = tgt_IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTupdate",
				"nullHandle select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SLCTinsert",
				"Insert@insert derive(each(match(type=='string'), $$ = iifNull($$, 'UNK')),",
				"          each(match(type=='integer'), $$ = iifNull($$, -1)),",
				"          each(match(type=='timestamp'), $$ = iifNull($$, toTimestamp('2999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss')))) ~> nullHandle",
				"SLCTupdate derive(IsActive = 'N',",
				"          effective_end_date = currentTimestamp()) ~> updateEnd",
				"updateEnd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKupdateTgt",
				"SLCTinsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKinsert"
			]
		}
	}
}