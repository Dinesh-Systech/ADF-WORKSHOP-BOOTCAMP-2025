{
	"name": "DF_OutletMaster",
	"properties": {
		"folder": {
			"name": "End to End Workshop/Stg to Tgt"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "SRCOutlet"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "TGTOutlet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "SNKCustomer"
				}
			],
			"transformations": [
				{
					"name": "selectSRC"
				},
				{
					"name": "selectTGT"
				},
				{
					"name": "joinSRCComapnyAndTGTCompany"
				},
				{
					"name": "alterInsert"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "union"
				},
				{
					"name": "CustomerKey"
				},
				{
					"name": "SelectSRCOrder"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterUpdate"
				},
				{
					"name": "Transformation"
				},
				{
					"name": "auditcolumns1"
				},
				{
					"name": "auditcolumns2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          MarketType as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          {Created By} as string,",
				"          {Created Date} as timestamp,",
				"          {Updated By} as string,",
				"          {Updated Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCOutlet",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerKey as integer,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          MarketType as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          {Created By} as string,",
				"          {Created Date} as timestamp,",
				"          {Updated By} as string,",
				"          {Updated Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TGTOutlet",
				"SRCOutlet select(mapColumn(",
				"          each(match(true()),",
				"               \"SRC_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSRC",
				"TGTOutlet select(mapColumn(",
				"          each(match(true()),",
				"               \"TGT_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTGT",
				"selectSRC, selectTGT join(SRC_CustomerCode == TGT_CustomerCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSRCComapnyAndTGTCompany",
				"split1@Insert alterRow(insertIf(true())) ~> alterInsert",
				"union derive(each(match(type == 'string'), $$ = iif(isNull($$) || $$ == 'NULL', 'UNK', $$)),",
				"          each(match(type == 'integer'), $$ = iifNull($#, -1)),",
				"          each(match(type == 'timestamp'), $$ = iifNull($$, toTimestamp('2999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss')))) ~> NullHandling",
				"auditcolumns1, alterUpdate union(byName: true)~> union",
				"Transformation keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CustomerKey",
				"CustomerKey select(mapColumn(",
				"          CustomerCode = SRC_CustomerCode,",
				"          CustomerKey,",
				"          CustomerName = SRC_CustomerName,",
				"          Address1 = SRC_Address1,",
				"          Address2 = SRC_Address2,",
				"          Address3 = SRC_Address3,",
				"          CountryCode = SRC_CountryCode,",
				"          CountryName = SRC_CountryName,",
				"          ZoneCode = SRC_ZoneCode,",
				"          ZoneName = SRC_ZoneName,",
				"          StateCode = SRC_StateCode,",
				"          StateName = SRC_StateName,",
				"          SaleDistrict = SRC_SaleDistrict,",
				"          PostCode = SRC_PostCode,",
				"          IsActive = SRC_IsActive,",
				"          RTM = SRC_RTM,",
				"          ProfitCentreCode = SRC_ProfitCentreCode,",
				"          ProfitCentreName = SRC_ProfitCentreName,",
				"          CostCentreCode = SRC_CostCentreCode,",
				"          CostCentreName = SRC_CostCentreName,",
				"          CreditDays = SRC_CreditDays,",
				"          Division = SRC_Division,",
				"          MarketType = SRC_MarketType,",
				"          CustomerLevel1 = SRC_CustomerLevel1,",
				"          CustomerLevel2 = SRC_CustomerLevel2,",
				"          CustomerLevel3 = SRC_CustomerLevel3,",
				"          Ref_Cluster = SRC_Ref_Cluster,",
				"          SalesGroupCode = SRC_SalesGroupCode,",
				"          SalesGroup = SRC_SalesGroup,",
				"          SaleOffice = SRC_SaleOffice,",
				"          SaleOfficeCode = SRC_SaleOfficeCode,",
				"          LocalGroupCode = SRC_LocalGroupCode,",
				"          LocalGroupName = SRC_LocalGroupName,",
				"          {Created By} = {SRC_Created By},",
				"          {Created Date} = {SRC_Created Date},",
				"          {Updated By} = {SRC_Updated By},",
				"          {Updated Date} = {SRC_Updated Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSRCOrder",
				"joinSRCComapnyAndTGTCompany split(isNull(TGT_CustomerCode) || (SRC_CustomerCode == TGT_CustomerCode && (SRC_Address1 != TGT_Address1 || SRC_Address2 != TGT_Address2 || SRC_Address3 != TGT_Address3)),",
				"     (SRC_CustomerCode == TGT_CustomerCode && (SRC_Address1 != TGT_Address1 || SRC_Address2 != TGT_Address2 || SRC_Address3 != TGT_Address3)),",
				"     disjoint: true) ~> split1@(Insert, Update)",
				"split1@Update alterRow(updateIf(true())) ~> alterUpdate",
				"NullHandling derive({SRC_Updated Date} = toTimestamp(\"2999-12-31 00:00:00\",\"yyyy-MM-dd HH:mm:ss\"),",
				"          SRC_CustomerName = right(SRC_CustomerName, length(SRC_CustomerName)-locate('-',SRC_CustomerName))) ~> Transformation",
				"alterInsert derive({SRC_Created By} = \"IN1684\",",
				"          {SRC_Created Date} = currentTimestamp(),",
				"          {SRC_Updated By} = \"UNK\",",
				"          {SRC_Updated Date} = toTimestamp(\"2999-12-31 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) ~> auditcolumns1",
				"alterUpdate derive({SRC_Updated By} = \"IN1684\",",
				"          {SRC_Updated Date} = currentTimestamp()) ~> auditcolumns2",
				"SelectSRCOrder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:(true()),",
				"     upsertable:false,",
				"     keys:['Address1','Address2','Address3'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerCode,",
				"          CustomerKey,",
				"          CustomerName,",
				"          Address1,",
				"          Address2,",
				"          Address3,",
				"          CountryCode,",
				"          CountryName,",
				"          ZoneCode,",
				"          ZoneName,",
				"          StateCode,",
				"          StateName,",
				"          SaleDistrict,",
				"          PostCode,",
				"          IsActive,",
				"          RTM,",
				"          ProfitCentreCode,",
				"          ProfitCentreName,",
				"          CostCentreCode,",
				"          CostCentreName,",
				"          CreditDays,",
				"          Division,",
				"          MarketType,",
				"          CustomerLevel1,",
				"          CustomerLevel2,",
				"          CustomerLevel3,",
				"          Ref_Cluster,",
				"          SalesGroupCode,",
				"          SalesGroup,",
				"          SaleOffice,",
				"          SaleOfficeCode,",
				"          LocalGroupCode,",
				"          LocalGroupName,",
				"          {Created By},",
				"          {Created Date},",
				"          {Updated By},",
				"          {Updated Date}",
				"     )) ~> SNKCustomer"
			]
		}
	}
}