{
	"name": "DF_CompanyMaster",
	"properties": {
		"folder": {
			"name": "End to End Workshop/Stg to Tgt"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "SRCCompany"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "TGTCompany"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSql_IN1684",
						"type": "DatasetReference"
					},
					"name": "SNKCompany"
				}
			],
			"transformations": [
				{
					"name": "selectSRC"
				},
				{
					"name": "selectTGT"
				},
				{
					"name": "joinSRCComapnyAndTGTCompany"
				},
				{
					"name": "alterInsert"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "union"
				},
				{
					"name": "CompanyKey"
				},
				{
					"name": "SelectSRCOrder"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterUpdate"
				},
				{
					"name": "Default"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CompanyCode as string,",
				"          CompanyName as string,",
				"          SalesOrgCode as string,",
				"          SalesOrgName as string,",
				"          ReportingHierarchyCode1 as string,",
				"          ReportingHierarchyName1 as string,",
				"          ReportingHierarchyCode2 as string,",
				"          ReportingHierarchyName2 as string,",
				"          ReportingHierarchyCode3 as string,",
				"          ReportingHierarchyName3 as string,",
				"          {Created By} as string,",
				"          {Created Date} as timestamp,",
				"          {Updated By} as string,",
				"          {Updated Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCCompany",
				"source(output(",
				"          CompanyCode as string,",
				"          CompanyKey as integer,",
				"          CompanyName as string,",
				"          SalesOrgCode as string,",
				"          SalesOrgName as string,",
				"          ReportingHierarchyCode1 as string,",
				"          ReportingHierarchyName1 as string,",
				"          ReportingHierarchyCode2 as string,",
				"          ReportingHierarchyName2 as string,",
				"          ReportingHierarchyCode3 as string,",
				"          ReportingHierarchyName3 as string,",
				"          {Created By} as string,",
				"          {Created Date} as timestamp,",
				"          {Updated By} as string,",
				"          {Updated Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TGTCompany",
				"SRCCompany select(mapColumn(",
				"          each(match(true()),",
				"               \"SRC_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSRC",
				"TGTCompany select(mapColumn(",
				"          each(match(true()),",
				"               \"TGT_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTGT",
				"selectSRC, selectTGT join(SRC_CompanyCode == TGT_CompanyCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSRCComapnyAndTGTCompany",
				"split1@Insert alterRow(insertIf(true())) ~> alterInsert",
				"union derive(each(match(type == 'string'), $$ = iif(isNull($$) || $$ == 'NULL', 'UNK', $$)),",
				"          each(match(type == 'int'), $$ = iifNull($#, -1)),",
				"          each(match(type == 'timestamp'), $$ = iifNull($$, toTimestamp('2999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss')))) ~> NullHandling",
				"alterInsert, alterUpdate union(byName: true)~> union",
				"Default keyGenerate(output(CompanyKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CompanyKey",
				"CompanyKey select(mapColumn(",
				"          CompanyCode = SRC_CompanyCode,",
				"          CompanyKey,",
				"          CompanyName = SRC_CompanyName,",
				"          SalesOrgCode = SRC_SalesOrgCode,",
				"          SalesOrgName = SRC_SalesOrgName,",
				"          ReportingHierarchyCode1 = SRC_ReportingHierarchyCode1,",
				"          ReportingHierarchyName1 = SRC_ReportingHierarchyName1,",
				"          ReportingHierarchyCode2 = SRC_ReportingHierarchyCode2,",
				"          ReportingHierarchyName2 = SRC_ReportingHierarchyName2,",
				"          ReportingHierarchyCode3 = SRC_ReportingHierarchyCode3,",
				"          ReportingHierarchyName3 = SRC_ReportingHierarchyName3,",
				"          {Created By} = {SRC_Created By},",
				"          {Created Date} = {SRC_Created Date},",
				"          {Updated By} = {SRC_Updated By},",
				"          {Updated Date} = {SRC_Updated Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSRCOrder",
				"joinSRCComapnyAndTGTCompany split(isNull(TGT_CompanyCode),",
				"     SRC_CompanyCode == TGT_CompanyCode && (SRC_SalesOrgCode != TGT_SalesOrgCode || SRC_SalesOrgName !=TGT_SalesOrgName),",
				"     disjoint: false) ~> split1@(Insert, Update)",
				"split1@Update alterRow(updateIf(true())) ~> alterUpdate",
				"NullHandling derive({SRC_Updated Date} = toTimestamp(\"2999-12-31 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) ~> Default",
				"SelectSRCOrder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CompanyCode,",
				"          CompanyKey,",
				"          CompanyName,",
				"          SalesOrgCode,",
				"          SalesOrgName,",
				"          ReportingHierarchyCode1,",
				"          ReportingHierarchyName1,",
				"          ReportingHierarchyCode2,",
				"          ReportingHierarchyName2,",
				"          ReportingHierarchyCode3,",
				"          ReportingHierarchyName3,",
				"          {Created By},",
				"          {Created Date},",
				"          {Updated By},",
				"          {Updated Date}",
				"     )) ~> SNKCompany"
			]
		}
	}
}