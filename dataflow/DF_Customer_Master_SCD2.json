{
	"name": "DF_Customer_Master_SCD2",
	"properties": {
		"folder": {
			"name": "End to End Workshop/Stg to Dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SrcCustomerMaster"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "TgtCustomerMaster"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SnkCustomerMasterInsert"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_Tgt_In1677",
						"type": "DatasetReference"
					},
					"name": "SnkCustomerMasterUpdate"
				}
			],
			"transformations": [
				{
					"name": "JoinSrcTgt"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "AuditColumns1"
				},
				{
					"name": "AuditColumns2"
				},
				{
					"name": "selectCols"
				},
				{
					"name": "TransformationTgt"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "CustomerKey"
				},
				{
					"name": "selectCols1"
				},
				{
					"name": "selectCols2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          Market_Type as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SrcCustomerMaster",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerKey as integer,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          Market_Type as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedAt as timestamp,",
				"          UpdatedAt as timestamp,",
				"          CreatedBy as string,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TgtCustomerMaster",
				"SrcCustomerMaster, TransformationTgt join(CustomerCode == tgt_CustomerCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSrcTgt",
				"CustomerKey split(CustomerCode!=tgt_CustomerCode||(CustomerCode ==tgt_CustomerCode && Address1!=tgt_Address1 || Address2!=tgt_Address2 || Address3!=tgt_Address3),",
				"     (CustomerCode ==tgt_CustomerCode && Address1!=tgt_Address1 || Address2!=tgt_Address2 || Address3!=tgt_Address3),",
				"     disjoint: true) ~> split1@(Insert, Update)",
				"split1@Insert alterRow(insertIf(true())) ~> alterRowInsert",
				"split1@Update alterRow(updateIf(true())) ~> alterRowUpdate",
				"alterRowInsert derive(UpdatedAt = toTimestamp(null()),",
				"          UpdatedBy = toString(null())) ~> AuditColumns1",
				"alterRowUpdate derive(tgt_UpdatedAt = currentTimestamp(),",
				"          tgt_UpdatedBy = tgt_CreatedBy) ~> AuditColumns2",
				"AuditColumns1 select(mapColumn(",
				"          CustomerCode,",
				"          CustomerName,",
				"          Address1,",
				"          Address2,",
				"          Address3,",
				"          CountryCode,",
				"          CountryName,",
				"          ZoneCode,",
				"          ZoneName,",
				"          StateCode,",
				"          StateName,",
				"          SaleDistrict,",
				"          PostCode,",
				"          IsActive,",
				"          RTM,",
				"          ProfitCentreCode,",
				"          ProfitCentreName,",
				"          CostCentreCode,",
				"          CostCentreName,",
				"          CreditDays,",
				"          Division,",
				"          Market_Type,",
				"          CustomerLevel1,",
				"          CustomerLevel2,",
				"          CustomerLevel3,",
				"          Ref_Cluster,",
				"          SalesGroupCode,",
				"          SalesGroup,",
				"          SaleOffice,",
				"          SaleOfficeCode,",
				"          LocalGroupCode,",
				"          LocalGroupName,",
				"          CreatedAt,",
				"          UpdatedAt,",
				"          CreatedBy,",
				"          UpdatedBy,",
				"          CustomerKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols",
				"TgtCustomerMaster select(mapColumn(",
				"          each(match(true()),",
				"               'tgt_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TransformationTgt",
				"JoinSrcTgt derive(each(match(type=='string'), $$ = iif(isNull($$)||lower($$)=='null','UNK',$$)),",
				"          each(match(type=='integer'), $$ = iif(isNull($$),-1,toInteger($$))),",
				"          each(match(type=='timestamp'), $$ = iif(isNull($$),toTimestamp('31/12/2999'),$$))) ~> NullHandling",
				"NullHandling keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CustomerKey",
				"AuditColumns2 select(mapColumn(",
				"          tgt_CustomerCode,",
				"          tgt_CustomerKey,",
				"          tgt_CustomerName,",
				"          tgt_Address1,",
				"          tgt_Address2,",
				"          tgt_Address3,",
				"          tgt_CountryCode,",
				"          tgt_CountryName,",
				"          tgt_ZoneCode,",
				"          tgt_ZoneName,",
				"          tgt_StateCode,",
				"          tgt_StateName,",
				"          tgt_SaleDistrict,",
				"          tgt_PostCode,",
				"          tgt_IsActive,",
				"          tgt_RTM,",
				"          tgt_ProfitCentreCode,",
				"          tgt_ProfitCentreName,",
				"          tgt_CostCentreCode,",
				"          tgt_CostCentreName,",
				"          tgt_CreditDays,",
				"          tgt_Division,",
				"          tgt_Market_Type,",
				"          tgt_CustomerLevel1,",
				"          tgt_CustomerLevel2,",
				"          tgt_CustomerLevel3,",
				"          tgt_Ref_Cluster,",
				"          tgt_SalesGroupCode,",
				"          tgt_SalesGroup,",
				"          tgt_SaleOffice,",
				"          tgt_SaleOfficeCode,",
				"          tgt_LocalGroupCode,",
				"          tgt_LocalGroupName,",
				"          tgt_CreatedAt,",
				"          tgt_UpdatedAt,",
				"          tgt_CreatedBy,",
				"          tgt_UpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols1",
				"selectCols1 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'tgt_','') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols2",
				"selectCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SnkCustomerMasterInsert",
				"selectCols2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CustomerCode'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SnkCustomerMasterUpdate"
			]
		}
	}
}