{
	"name": "DF_Tgt_SCD2_Customer_Master_IN1675",
	"properties": {
		"folder": {
			"name": "DF_Stg_to_Tgt_IN1675"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "SrcCustomer"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "TgtCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_IN1675",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "NewRecords"
				},
				{
					"name": "ChangedRecords"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "AddSrc"
				},
				{
					"name": "AddTgt"
				},
				{
					"name": "select10"
				},
				{
					"name": "CustomerKey"
				},
				{
					"name": "select11"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "Transformations"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          MarketType as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SrcCustomer",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerKey as integer,",
				"          CustomerName as string,",
				"          Address1 as string,",
				"          Address2 as string,",
				"          Address3 as string,",
				"          CountryCode as string,",
				"          CountryName as string,",
				"          ZoneCode as string,",
				"          ZoneName as string,",
				"          StateCode as string,",
				"          StateName as string,",
				"          SaleDistrict as string,",
				"          PostCode as integer,",
				"          IsActive as string,",
				"          RTM as string,",
				"          ProfitCentreCode as string,",
				"          ProfitCentreName as string,",
				"          CostCentreCode as string,",
				"          CostCentreName as string,",
				"          CreditDays as integer,",
				"          Division as integer,",
				"          MarketType as string,",
				"          CustomerLevel1 as string,",
				"          CustomerLevel2 as string,",
				"          CustomerLevel3 as string,",
				"          Ref_Cluster as string,",
				"          SalesGroupCode as string,",
				"          SalesGroup as string,",
				"          SaleOffice as string,",
				"          SaleOfficeCode as string,",
				"          LocalGroupCode as string,",
				"          LocalGroupName as string,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TgtCustomer",
				"CustomerKey, AddTgt join(Src_CustomerCode == CustomerCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(CustomerCode) || ((Src_CustomerCode==CustomerCode)&&(Src_Address1!=Address1||Src_Address2!=Address2||Src_Address3!=Address3)),",
				"     !isNull(CustomerCode) || ((Src_CustomerCode==CustomerCode)&&(Src_Address1!=Address1||Src_Address2!=Address2||Src_Address3!=Address3)),",
				"     Src_CustomerCode==CustomerCode && Src_Address1!=Address1 && Src_Address2!=Address2 && Src_Address3!=Address3,",
				"     disjoint: true) ~> split1@(Insert, Old, Existing)",
				"select11, select4, select10 union(byName: true)~> union1",
				"split1@Insert derive(Src_CreatedDate = currentTimestamp(),",
				"          Src_IsActive = 'Y',",
				"          Src_CreatedBy = 'UNK') ~> derivedColumn1",
				"derivedColumn1 alterRow(insertIf(true())) ~> NewRecords",
				"derivedColumn4 alterRow(updateIf(true())) ~> ChangedRecords",
				"ChangedRecords select(mapColumn(",
				"          CustomerCode,",
				"          CustomerKey = split1@Old@CustomerKey,",
				"          CustomerName,",
				"          Address1,",
				"          Address2,",
				"          Address3,",
				"          CountryCode,",
				"          CountryName,",
				"          ZoneCode,",
				"          ZoneName,",
				"          StateCode,",
				"          StateName,",
				"          SaleDistrict,",
				"          PostCode,",
				"          IsActive,",
				"          RTM,",
				"          ProfitCentreCode,",
				"          ProfitCentreName,",
				"          CostCentreCode,",
				"          CostCentreName,",
				"          CreditDays,",
				"          Division,",
				"          MarketType,",
				"          CustomerLevel1,",
				"          CustomerLevel2,",
				"          CustomerLevel3,",
				"          Ref_Cluster,",
				"          SalesGroupCode,",
				"          SalesGroup,",
				"          SaleOffice,",
				"          SaleOfficeCode,",
				"          LocalGroupCode,",
				"          LocalGroupName,",
				"          CreatedBy,",
				"          CreatedDate,",
				"          UpdatedBy,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select4",
				"split1@Old derive(Src_IsActive = 'N',",
				"          UpdatedBy = 'UNK',",
				"          UpdatedDate = currentTimestamp()) ~> derivedColumn4",
				"SrcCustomer select(mapColumn(",
				"          each(match(true()),",
				"               'Src_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddSrc",
				"TgtCustomer select(mapColumn(",
				"          CustomerCode,",
				"          CustomerKey,",
				"          CustomerName,",
				"          Address1,",
				"          Address2,",
				"          Address3,",
				"          CountryCode,",
				"          CountryName,",
				"          ZoneCode,",
				"          ZoneName,",
				"          StateCode,",
				"          StateName,",
				"          SaleDistrict,",
				"          PostCode,",
				"          IsActive,",
				"          RTM,",
				"          ProfitCentreCode,",
				"          ProfitCentreName,",
				"          CostCentreCode,",
				"          CostCentreName,",
				"          CreditDays,",
				"          Division,",
				"          MarketType,",
				"          CustomerLevel1,",
				"          CustomerLevel2,",
				"          CustomerLevel3,",
				"          Ref_Cluster,",
				"          SalesGroupCode,",
				"          SalesGroup,",
				"          SaleOffice,",
				"          SaleOfficeCode,",
				"          LocalGroupCode,",
				"          LocalGroupName,",
				"          CreatedBy,",
				"          CreatedDate,",
				"          UpdatedBy,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddTgt",
				"split1@Existing select(mapColumn(",
				"          CustomerCode,",
				"          CustomerKey = split1@Existing@CustomerKey,",
				"          CustomerName,",
				"          Address1,",
				"          Address2,",
				"          Address3,",
				"          CountryCode,",
				"          CountryName,",
				"          ZoneCode,",
				"          ZoneName,",
				"          StateCode,",
				"          StateName,",
				"          SaleDistrict,",
				"          PostCode,",
				"          IsActive,",
				"          RTM,",
				"          ProfitCentreCode,",
				"          ProfitCentreName,",
				"          CostCentreCode,",
				"          CostCentreName,",
				"          CreditDays,",
				"          Division,",
				"          MarketType,",
				"          CustomerLevel1,",
				"          CustomerLevel2,",
				"          CustomerLevel3,",
				"          Ref_Cluster,",
				"          SalesGroupCode,",
				"          SalesGroup,",
				"          SaleOffice,",
				"          SaleOfficeCode,",
				"          LocalGroupCode,",
				"          LocalGroupName,",
				"          CreatedBy,",
				"          CreatedDate,",
				"          UpdatedBy,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"AddSrc keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CustomerKey",
				"NewRecords select(mapColumn(",
				"          CustomerCode = Src_CustomerCode,",
				"          CustomerKey = split1@Insert@CustomerKey,",
				"          CustomerName = Src_CustomerName,",
				"          Address1 = Src_Address1,",
				"          Address2 = Src_Address2,",
				"          Address3 = Src_Address3,",
				"          CountryCode = Src_CountryCode,",
				"          CountryName = Src_CountryName,",
				"          ZoneCode = Src_ZoneCode,",
				"          ZoneName = Src_ZoneName,",
				"          StateCode = Src_StateCode,",
				"          StateName = Src_StateName,",
				"          SaleDistrict = Src_SaleDistrict,",
				"          PostCode = Src_PostCode,",
				"          IsActive = Src_IsActive,",
				"          RTM = Src_RTM,",
				"          ProfitCentreCode = Src_ProfitCentreCode,",
				"          ProfitCentreName = Src_ProfitCentreName,",
				"          CostCentreCode = Src_CostCentreCode,",
				"          CostCentreName = Src_CostCentreName,",
				"          CreditDays = Src_CreditDays,",
				"          Division = Src_Division,",
				"          MarketType = Src_MarketType,",
				"          CustomerLevel1 = Src_CustomerLevel1,",
				"          CustomerLevel2 = Src_CustomerLevel2,",
				"          CustomerLevel3 = Src_CustomerLevel3,",
				"          Ref_Cluster = Src_Ref_Cluster,",
				"          SalesGroupCode = Src_SalesGroupCode,",
				"          SalesGroup = Src_SalesGroup,",
				"          SaleOffice = Src_SaleOffice,",
				"          SaleOfficeCode = Src_SaleOfficeCode,",
				"          LocalGroupCode = Src_LocalGroupCode,",
				"          LocalGroupName = Src_LocalGroupName,",
				"          CreatedBy = Src_CreatedBy,",
				"          CreatedDate = Src_CreatedDate,",
				"          UpdatedBy = Src_UpdatedBy,",
				"          UpdatedDate = Src_UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"union1 derive(each(match(type=='integer'), $$ = iifNull($$, -1, $$)),",
				"          each(match(type=='string'), $$ = iif(isNull($$),'UNK',$$))) ~> NullHandling",
				"NullHandling derive(CustomerName = right(CustomerName, length(CustomerName)-locate('-',CustomerName))) ~> Transformations",
				"Transformations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> DimCustomer"
			]
		}
	}
}