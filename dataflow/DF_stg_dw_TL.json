{
	"name": "DF_stg_dw_TL",
	"properties": {
		"folder": {
			"name": "stg - dw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL_IN1685",
						"type": "DatasetReference"
					},
					"name": "SRCstg"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL_IN1685",
						"type": "DatasetReference"
					},
					"name": "SNKtgt"
				}
			],
			"transformations": [
				{
					"name": "NULL"
				},
				{
					"name": "SKEY"
				},
				{
					"name": "TRANSFORMATIONS"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TLTerritoryName as string,",
				"          TLTerritoryCode as string,",
				"          TLTerritoryID as integer,",
				"          TLName as string,",
				"          TLSFACode as string,",
				"          TLCode as integer,",
				"          TLEmail as string,",
				"          TLMobile as long,",
				"          MarketWorkingNorms as integer,",
				"          MinMarketWorkingwithTSE as integer,",
				"          Active_flag as string,",
				"          TLStartDate as string,",
				"          TLEndDate as string,",
				"          ClusterCode as string,",
				"          created_date as timestamp,",
				"          created_by as string,",
				"          updated_date as timestamp,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRCstg",
				"TRANSFORMATIONS derive(each(match(type=='string'), $$ = iif(isNull($$) || $$ == 'NULL', 'UNK', $$)),",
				"          each(match(type=='integer'), $$ = iifNull($#, -1)),",
				"          each(match(type=='timestamp'), $$ = iifNull($$, toTimestamp('2999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss')))) ~> NULL",
				"NULL keyGenerate(output(TL_Key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SKEY",
				"SRCstg derive(TLStartDate = toDate(TLStartDate, 'dd-MM-yyyy'),",
				"          TLEndDate = toDate(TLEndDate, 'dd-MM-yyyy')) ~> TRANSFORMATIONS",
				"SKEY sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SNKtgt"
			]
		}
	}
}